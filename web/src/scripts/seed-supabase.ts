// Script pour ins√©rer des donn√©es de test dans Supabase
import { createClient } from '@supabase/supabase-js';
import { mockProducers } from '../data/mockProducers';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Configuration Supabase manquante');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function seedSupabase() {
  console.log('üå± D√©but de l\'insertion des donn√©es de test...');

  try {
    // V√©rifier si des donn√©es existent d√©j√†
    const { count, error: countError } = await supabase
      .from('producers')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.error('‚ùå Erreur lors de la v√©rification:', countError);
      return;
    }

    if (count && count > 0) {
      console.log(`‚ÑπÔ∏è  ${count} producteurs existent d√©j√† dans la base`);
      console.log('Voulez-vous continuer quand m√™me ? (y/N)');
      // Pour l'instant, on continue
    }

    // Pr√©parer les donn√©es pour l'insertion
    const producersToInsert = mockProducers.map(producer => ({
      id: producer.id,
      cooperative_id: producer.cooperative_id,
      first_name: producer.first_name,
      last_name: producer.last_name,
      phone: producer.phone,
      email: producer.email,
      region: producer.region,
      department: producer.department,
      commune: producer.commune,
      is_active: producer.is_active,
      created_at: producer.created_at,
      updated_at: producer.updated_at
    }));

    console.log(`üìù Insertion de ${producersToInsert.length} producteurs...`);

    // Ins√©rer par lots de 50 pour √©viter les limites
    const batchSize = 50;
    let inserted = 0;

    for (let i = 0; i < producersToInsert.length; i += batchSize) {
      const batch = producersToInsert.slice(i, i + batchSize);
      
      const { data, error } = await supabase
        .from('producers')
        .insert(batch);

      if (error) {
        console.error(`‚ùå Erreur lors de l'insertion du lot ${Math.floor(i / batchSize) + 1}:`, error);
        continue;
      }

      inserted += batch.length;
      console.log(`‚úÖ Lot ${Math.floor(i / batchSize) + 1} ins√©r√©: ${batch.length} producteurs`);
    }

    console.log(`üéâ Insertion termin√©e: ${inserted} producteurs ins√©r√©s`);

    // V√©rifier l'insertion
    const { count: finalCount, error: finalError } = await supabase
      .from('producers')
      .select('*', { count: 'exact', head: true });

    if (finalError) {
      console.error('‚ùå Erreur lors de la v√©rification finale:', finalError);
    } else {
      console.log(`üìä Total final dans la base: ${finalCount} producteurs`);
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le script
seedSupabase();
