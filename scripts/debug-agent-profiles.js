require('dotenv').config({ path: '.env' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

const TEST_AGENT_ID = 'b00a283f-0a46-41d2-af95-8a256c9c2771';

async function debugAgentProfiles() {
  console.log('üë§ Debug des profils d\'agent\n');
  
  // 1. V√©rifier tous les profils avec cet ID
  console.log('üìã Recherche de tous les profils avec cet ID:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const { data: allProfiles, error: allError } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', TEST_AGENT_ID);
  
  if (allError) {
    console.log(`‚ùå Erreur: ${allError.message}`);
  } else {
    console.log(`‚úÖ Profils trouv√©s: ${allProfiles?.length || 0}`);
    if (allProfiles && allProfiles.length > 0) {
      allProfiles.forEach((profile, index) => {
        console.log(`   ${index + 1}. ID: ${profile.id}`);
        console.log(`      R√¥le: ${profile.role}`);
        console.log(`      Nom: ${profile.full_name}`);
        console.log(`      T√©l√©phone: ${profile.phone}`);
        console.log(`      Cr√©√©: ${profile.created_at}`);
      });
    }
  }
  
  // 2. V√©rifier les profils par r√¥le agent
  console.log('\nüîç Recherche des profils avec r√¥le agent:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const { data: agentProfiles, error: agentError } = await supabase
    .from('profiles')
    .select('*')
    .eq('role', 'agent');
  
  if (agentError) {
    console.log(`‚ùå Erreur: ${agentError.message}`);
  } else {
    console.log(`‚úÖ Agents trouv√©s: ${agentProfiles?.length || 0}`);
    if (agentProfiles && agentProfiles.length > 0) {
      agentProfiles.forEach((profile, index) => {
        console.log(`   ${index + 1}. ID: ${profile.id}`);
        console.log(`      Nom: ${profile.full_name}`);
        console.log(`      T√©l√©phone: ${profile.phone}`);
        console.log(`      Cr√©√©: ${profile.created_at}`);
      });
    }
  }
  
  // 3. V√©rifier les visites de cet agent
  console.log('\nüìÖ V√©rification des visites de cet agent:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const { data: agentVisits, error: visitsError } = await supabase
    .from('visits')
    .select('id, agent_id, status, visit_date, created_at')
    .eq('agent_id', TEST_AGENT_ID)
    .order('created_at', { ascending: false })
    .limit(5);
  
  if (visitsError) {
    console.log(`‚ùå Erreur: ${visitsError.message}`);
  } else {
    console.log(`‚úÖ Visites trouv√©es: ${agentVisits?.length || 0}`);
    if (agentVisits && agentVisits.length > 0) {
      agentVisits.forEach((visit, index) => {
        console.log(`   ${index + 1}. ID: ${visit.id}`);
        console.log(`      Statut: ${visit.status}`);
        console.log(`      Date: ${visit.visit_date}`);
        console.log(`      Cr√©√©e: ${visit.created_at}`);
      });
    }
  }
  
  // 4. Test de mise √† jour avec diff√©rents agents
  console.log('\nüîÑ Test de mise √† jour avec diff√©rents agents:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  if (agentProfiles && agentProfiles.length > 0) {
    for (const agent of agentProfiles.slice(0, 3)) {
      console.log(`\nüë§ Test avec agent: ${agent.full_name} (${agent.id})`);
      
      const { data: testVisits, error: testError } = await supabase
        .from('visits')
        .select('id, status')
        .eq('agent_id', agent.id)
        .limit(1);
      
      if (testError) {
        console.log(`   ‚ùå Erreur r√©cup√©ration visites: ${testError.message}`);
      } else if (testVisits && testVisits.length > 0) {
        const visitId = testVisits[0].id;
        console.log(`   üìã Visite test: ${visitId}`);
        
        const { data: updateTest, error: updateError } = await supabase
          .from('visits')
          .update({ 
            updated_at: new Date().toISOString(),
            notes: `Test mise √† jour - ${agent.full_name} - ${new Date().toISOString()}`
          })
          .eq('id', visitId)
          .select();
        
        if (updateError) {
          console.log(`   ‚ùå Erreur mise √† jour: ${updateError.message}`);
        } else {
          console.log(`   ‚úÖ Mise √† jour OK: ${updateTest?.length || 0} ligne(s)`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è  Aucune visite trouv√©e pour cet agent`);
      }
    }
  }
}

// Ex√©cuter le debug
async function runDebug() {
  try {
    await debugAgentProfiles();
  } catch (error) {
    console.error('‚ùå Erreur lors du debug:', error);
  }
}

runDebug();
