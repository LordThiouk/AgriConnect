/**
 * Diagnostiquer pourquoi une visite n'est pas trouv√©e
 */

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugVisitNotFound() {
  console.log('üîç Diagnostic visite non trouv√©e\n');
  console.log('‚ïê'.repeat(80));
  
  const visitId = '6203b6b6-f530-4971-b62d-26f4c570058c';
  console.log(`\nüìã Visite ID: ${visitId}`);
  
  // 1. V√©rifier si la visite existe dans la table visits
  console.log(`\n1Ô∏è‚É£ V√©rification dans la table visits:`);
  const { data: visit, error: visitError } = await supabase
    .from('visits')
    .select('*')
    .eq('id', visitId)
    .single();
  
  if (visitError) {
    console.log(`   ‚ùå Erreur: ${visitError.code} - ${visitError.message}`);
  } else if (visit) {
    console.log(`   ‚úÖ Visite trouv√©e dans la table visits:`);
    console.log(`      ID: ${visit.id}`);
    console.log(`      Producer: ${visit.producer_id}`);
    console.log(`      Plot: ${visit.plot_id}`);
    console.log(`      Agent: ${visit.agent_id}`);
    console.log(`      Date: ${visit.visit_date}`);
    console.log(`      Status: ${visit.status}`);
  } else {
    console.log(`   ‚ùå Visite non trouv√©e dans la table visits`);
  }
  
  // 2. V√©rifier les producteurs li√©s
  if (visit) {
    console.log(`\n2Ô∏è‚É£ V√©rification du producteur ${visit.producer_id}:`);
    const { data: producer, error: producerError } = await supabase
      .from('producers')
      .select('*')
      .eq('id', visit.producer_id)
      .single();
    
    if (producerError) {
      console.log(`   ‚ùå Erreur producteur: ${producerError.code} - ${producerError.message}`);
    } else if (producer) {
      console.log(`   ‚úÖ Producteur trouv√©: ${producer.first_name} ${producer.last_name}`);
    } else {
      console.log(`   ‚ùå Producteur non trouv√©`);
    }
    
    // 3. V√©rifier les parcelles li√©es
    console.log(`\n3Ô∏è‚É£ V√©rification de la parcelle ${visit.plot_id}:`);
    const { data: plot, error: plotError } = await supabase
      .from('plots')
      .select('*')
      .eq('id', visit.plot_id)
      .single();
    
    if (plotError) {
      console.log(`   ‚ùå Erreur parcelle: ${plotError.code} - ${plotError.message}`);
    } else if (plot) {
      console.log(`   ‚úÖ Parcelle trouv√©e: ${plot.name_season_snapshot}`);
    } else {
      console.log(`   ‚ùå Parcelle non trouv√©e`);
    }
  }
  
  // 4. Tester le RPC get_visit_for_edit
  console.log(`\n4Ô∏è‚É£ Test du RPC get_visit_for_edit:`);
  const { data: rpcData, error: rpcError } = await supabase
    .rpc('get_visit_for_edit', { p_visit_id: visitId });
  
  if (rpcError) {
    console.log(`   ‚ùå Erreur RPC: ${rpcError.code} - ${rpcError.message}`);
    console.log(`   D√©tails: ${rpcError.details}`);
    console.log(`   Hint: ${rpcError.hint}`);
  } else if (rpcData) {
    console.log(`   ‚úÖ RPC r√©ussi !`);
    console.log(`   Producer: ${rpcData.producer?.first_name} ${rpcData.producer?.last_name}`);
    console.log(`   Plot: ${rpcData.plot?.name}`);
  } else {
    console.log(`   ‚ùå RPC retourne null`);
  }
  
  // 5. Lister toutes les visites pour comparaison
  console.log(`\n5Ô∏è‚É£ Liste des visites existantes:`);
  const { data: allVisits } = await supabase
    .from('visits')
    .select('id, producer_id, plot_id, agent_id, visit_date, status')
    .limit(5);
  
  if (allVisits && allVisits.length > 0) {
    console.log(`   ‚úÖ ${allVisits.length} visite(s) trouv√©e(s):`);
    allVisits.forEach((v, index) => {
      console.log(`      ${index + 1}. ${v.id} (${v.status})`);
    });
  } else {
    console.log(`   ‚ùå Aucune visite trouv√©e`);
  }
  
  console.log('\n' + '‚ïê'.repeat(80));
  console.log('\n‚úÖ Diagnostic termin√©\n');
}

debugVisitNotFound().catch(console.error);
