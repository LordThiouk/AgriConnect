const fs = require('fs');
const path = require('path');

function analyzeDashboardVsPlotsMap() {
  console.log('üîç Analyse comparative des cartes Dashboard vs Parcelles\n');
  console.log('='.repeat(80));

  const results = {
    dashboard_map: { status: 'pending', details: [] },
    plots_map: { status: 'pending', details: [] },
    comparison: { status: 'pending', details: [] },
    recommendations: { status: 'pending', details: [] }
  };

  // 1. Analyser la carte du Dashboard
  console.log('\nüìä ANALYSE CARTE DASHBOARD...');
  try {
    const dashboardMapPath = path.join(__dirname, '../web/src/components/dashboard/MapPanel.tsx');
    
    if (!fs.existsSync(dashboardMapPath)) {
      results.dashboard_map.status = 'error';
      results.dashboard_map.details.push('‚ùå Fichier MapPanel.tsx non trouv√©');
    } else {
      const dashboardContent = fs.readFileSync(dashboardMapPath, 'utf8');
      
      results.dashboard_map.status = 'success';
      results.dashboard_map.details.push('‚úÖ Fichier MapPanel.tsx trouv√©');
      
      // Analyser les imports
      const imports = {
        react_leaflet: dashboardContent.includes('react-leaflet'),
        leaflet_css: dashboardContent.includes('leaflet/dist/leaflet.css'),
        plots_service: dashboardContent.includes('PlotsService'),
        map_components: [
          'MapContainer',
          'TileLayer', 
          'Marker',
          'Popup',
          'useMap'
        ].filter(comp => dashboardContent.includes(comp))
      };
      
      results.dashboard_map.details.push(`‚úÖ Imports React Leaflet: ${imports.react_leaflet}`);
      results.dashboard_map.details.push(`‚úÖ CSS Leaflet: ${imports.leaflet_css}`);
      results.dashboard_map.details.push(`‚úÖ PlotsService: ${imports.plots_service}`);
      results.dashboard_map.details.push(`‚úÖ Composants carte: ${imports.map_components.join(', ')}`);
      
      // Analyser les fonctionnalit√©s
      const features = {
        data_fetching: dashboardContent.includes('getPlotsWithGeolocation'),
        loading_states: dashboardContent.includes('loading') && dashboardContent.includes('error'),
        map_center: dashboardContent.includes('14.7167') && dashboardContent.includes('-17.4677'),
        markers: dashboardContent.includes('MarkerComponent'),
        popups: dashboardContent.includes('PopupComponent'),
        auto_fit: dashboardContent.includes('fitBounds'),
        navigation: dashboardContent.includes('window.location.href = \'/plots\''),
        refresh_button: dashboardContent.includes('Actualiser')
      };
      
      Object.entries(features).forEach(([feature, present]) => {
        results.dashboard_map.details.push(`${present ? '‚úÖ' : '‚ùå'} ${feature}: ${present}`);
      });
      
      // Analyser les statistiques
      const hasStats = dashboardContent.includes('plotsWithCoords.length') && 
                      dashboardContent.includes('area_hectares') &&
                      dashboardContent.includes('status === \'active\'');
      results.dashboard_map.details.push(`${hasStats ? '‚úÖ' : '‚ùå'} Statistiques temps r√©el: ${hasStats}`);
    }
  } catch (error) {
    results.dashboard_map.status = 'error';
    results.dashboard_map.details.push(`‚ùå Erreur: ${error.message}`);
  }

  // 2. Analyser la carte des Parcelles
  console.log('\nüó∫Ô∏è ANALYSE CARTE PARCELLES...');
  try {
    const plotsMapPath = path.join(__dirname, '../web/src/components/Plots/PlotsLeafletMap.tsx');
    
    if (!fs.existsSync(plotsMapPath)) {
      results.plots_map.status = 'error';
      results.plots_map.details.push('‚ùå Fichier PlotsLeafletMap.tsx non trouv√©');
    } else {
      const plotsContent = fs.readFileSync(plotsMapPath, 'utf8');
      
      results.plots_map.status = 'success';
      results.plots_map.details.push('‚úÖ Fichier PlotsLeafletMap.tsx trouv√©');
      
      // Analyser les imports
      const imports = {
        react_leaflet: plotsContent.includes('react-leaflet'),
        leaflet_css: plotsContent.includes('leaflet/dist/leaflet.css'),
        map_components: [
          'MapContainer',
          'TileLayer', 
          'Marker',
          'Popup',
          'useMap'
        ].filter(comp => plotsContent.includes(comp))
      };
      
      results.plots_map.details.push(`‚úÖ Imports React Leaflet: ${imports.react_leaflet}`);
      results.plots_map.details.push(`‚úÖ CSS Leaflet: ${imports.leaflet_css}`);
      results.plots_map.details.push(`‚úÖ Composants carte: ${imports.map_components.join(', ')}`);
      
      // Analyser les fonctionnalit√©s
      const features = {
        props_interface: plotsContent.includes('PlotsLeafletMapProps'),
        loading_prop: plotsContent.includes('loading?: boolean'),
        on_plot_select: plotsContent.includes('onPlotSelect'),
        selected_plot: plotsContent.includes('selectedPlot'),
        map_center: plotsContent.includes('14.7167') && plotsContent.includes('-17.4677'),
        markers: plotsContent.includes('MarkerComponent'),
        popups: plotsContent.includes('PopupComponent'),
        auto_fit: plotsContent.includes('fitBounds'),
        status_colors: plotsContent.includes('getStatusColor'),
        status_labels: plotsContent.includes('getStatusLabel')
      };
      
      Object.entries(features).forEach(([feature, present]) => {
        results.plots_map.details.push(`${present ? '‚úÖ' : '‚ùå'} ${feature}: ${present}`);
      });
      
      // Analyser la gestion des coordonn√©es
      const coordHandling = plotsContent.includes('filter(plot =>') && 
                           plotsContent.includes('latitude !== null') &&
                           plotsContent.includes('longitude !== null');
      results.plots_map.details.push(`${coordHandling ? '‚úÖ' : '‚ùå'} Gestion coordonn√©es: ${coordHandling}`);
    }
  } catch (error) {
    results.plots_map.status = 'error';
    results.plots_map.details.push(`‚ùå Erreur: ${error.message}`);
  }

  // 3. Comparaison des deux cartes
  console.log('\n‚öñÔ∏è COMPARAISON DASHBOARD vs PARCELLES...');
  try {
    const dashboardMapPath = path.join(__dirname, '../web/src/components/dashboard/MapPanel.tsx');
    const plotsMapPath = path.join(__dirname, '../web/src/components/Plots/PlotsLeafletMap.tsx');
    
    if (fs.existsSync(dashboardMapPath) && fs.existsSync(plotsMapPath)) {
      const dashboardContent = fs.readFileSync(dashboardMapPath, 'utf8');
      const plotsContent = fs.readFileSync(plotsMapPath, 'utf8');
      
      results.comparison.status = 'success';
      
      // Comparer les fonctionnalit√©s communes
      const commonFeatures = {
        'MapContainer': dashboardContent.includes('MapContainer') && plotsContent.includes('MapContainer'),
        'TileLayer': dashboardContent.includes('TileLayer') && plotsContent.includes('TileLayer'),
        'Marker': dashboardContent.includes('Marker') && plotsContent.includes('Marker'),
        'Popup': dashboardContent.includes('Popup') && plotsContent.includes('Popup'),
        'useMap': dashboardContent.includes('useMap') && plotsContent.includes('useMap'),
        'Icon.Default': dashboardContent.includes('Icon.Default') && plotsContent.includes('Icon.Default'),
        'Centre Dakar': dashboardContent.includes('14.7167') && plotsContent.includes('14.7167'),
        'fitBounds': dashboardContent.includes('fitBounds') && plotsContent.includes('fitBounds')
      };
      
      Object.entries(commonFeatures).forEach(([feature, bothHave]) => {
        results.comparison.details.push(`${bothHave ? '‚úÖ' : '‚ùå'} ${feature}: ${bothHave ? 'Identique' : 'Diff√©rent'}`);
      });
      
      // Comparer les diff√©rences
      const differences = {
        'Donn√©es via props': {
          dashboard: 'Non (r√©cup√®re via PlotsService)',
          plots: 'Oui (re√ßoit plots en props)'
        },
        'Gestion loading': {
          dashboard: '√âtats internes (loading, error)',
          plots: 'Props externes'
        },
        'Bouton actualisation': {
          dashboard: 'Oui (fetchPlotsWithGeo)',
          plots: 'Non'
        },
        'Navigation': {
          dashboard: 'Bouton vers /plots',
          plots: 'Pas de navigation'
        },
        'Statistiques': {
          dashboard: 'KPIs int√©gr√©s (parcelles, hectares, actives)',
          plots: 'Pas de statistiques'
        },
        'Interface': {
          dashboard: 'Card avec header et contr√¥les',
          plots: 'Composant pur de carte'
        }
      };
      
      Object.entries(differences).forEach(([aspect, values]) => {
        results.comparison.details.push(`üìä ${aspect}:`);
        results.comparison.details.push(`   - Dashboard: ${values.dashboard}`);
        results.comparison.details.push(`   - Parcelles: ${values.plots}`);
      });
      
    } else {
      results.comparison.status = 'error';
      results.comparison.details.push('‚ùå Impossible de comparer - fichiers manquants');
    }
  } catch (error) {
    results.comparison.status = 'error';
    results.comparison.details.push(`‚ùå Erreur: ${error.message}`);
  }

  // 4. Recommandations
  console.log('\nüí° RECOMMANDATIONS...');
  try {
    results.recommendations.status = 'success';
    
    // V√©rifier si les cartes sont coh√©rentes
    const dashboardMapPath = path.join(__dirname, '../web/src/components/dashboard/MapPanel.tsx');
    const plotsMapPath = path.join(__dirname, '../web/src/components/Plots/PlotsLeafletMap.tsx');
    
    if (fs.existsSync(dashboardMapPath) && fs.existsSync(plotsMapPath)) {
      const dashboardContent = fs.readFileSync(dashboardMapPath, 'utf8');
      const plotsContent = fs.readFileSync(plotsMapPath, 'utf8');
      
      // V√©rifier la coh√©rence des centres de carte
      const dashboardCenter = dashboardContent.includes('14.7167') && dashboardContent.includes('-17.4677');
      const plotsCenter = plotsContent.includes('14.7167') && plotsContent.includes('-17.4677');
      
      if (dashboardCenter && plotsCenter) {
        results.recommendations.details.push('‚úÖ Centres de carte coh√©rents (Dakar)');
      } else {
        results.recommendations.details.push('‚ö†Ô∏è Centres de carte diff√©rents');
      }
      
      // V√©rifier la coh√©rence des ic√¥nes
      const dashboardIcons = dashboardContent.includes('marker-icon.png');
      const plotsIcons = plotsContent.includes('marker-icon.png');
      
      if (dashboardIcons && plotsIcons) {
        results.recommendations.details.push('‚úÖ Ic√¥nes Leaflet coh√©rentes');
      } else {
        results.recommendations.details.push('‚ö†Ô∏è Ic√¥nes Leaflet diff√©rentes');
      }
      
      // Recommandations d'am√©lioration
      results.recommendations.details.push('üí° Am√©liorations possibles:');
      results.recommendations.details.push('   - Unifier les styles des popups');
      results.recommendations.details.push('   - Ajouter les m√™mes couleurs de statut');
      results.recommendations.details.push('   - Standardiser les messages d\'erreur');
      results.recommendations.details.push('   - Ajouter des contr√¥les de zoom similaires');
      
      // V√©rifier si le Dashboard utilise bien les m√™mes donn√©es
      const dashboardUsesRPC = dashboardContent.includes('get_plots_with_geolocation');
      const plotsUsesRPC = plotsContent.includes('get_plots_with_geolocation') || 
                          plotsContent.includes('PlotsService.getPlots');
      
      if (dashboardUsesRPC) {
        results.recommendations.details.push('‚úÖ Dashboard utilise la RPC get_plots_with_geolocation');
      } else {
        results.recommendations.details.push('‚ö†Ô∏è Dashboard n\'utilise pas la bonne RPC');
      }
      
      if (plotsUsesRPC) {
        results.recommendations.details.push('‚úÖ Parcelles utilise des donn√©es coh√©rentes');
      } else {
        results.recommendations.details.push('‚ö†Ô∏è Parcelles pourrait utiliser la m√™me RPC');
      }
    }
  } catch (error) {
    results.recommendations.status = 'error';
    results.recommendations.details.push(`‚ùå Erreur: ${error.message}`);
  }

  // Affichage des r√©sultats
  console.log('\n' + '='.repeat(80));
  console.log('üìä R√âSULTATS - ANALYSE COMPARATIVE');
  console.log('='.repeat(80));

  const components = Object.keys(results);
  
  components.forEach(component => {
    const status = results[component].status;
    const icon = status === 'success' ? '‚úÖ' : status === 'error' ? '‚ùå' : '‚è≥';
    console.log(`\n${icon} ${component.toUpperCase().replace('_', ' ')}: ${status}`);
    
    if (results[component].details.length > 0) {
      results[component].details.forEach(detail => console.log(`   ${detail}`));
    }
  });

  // R√©sum√© final
  console.log('\n' + '='.repeat(80));
  console.log('üìà R√âSUM√â ANALYSE COMPARATIVE');
  console.log('='.repeat(80));

  const totalComponents = components.length;
  const successCount = components.filter(c => results[c].status === 'success').length;
  const errorCount = components.filter(c => results[c].status === 'error').length;

  console.log(`‚úÖ Analyses r√©ussies: ${successCount}/${totalComponents}`);
  console.log(`‚ùå Analyses en erreur: ${errorCount}/${totalComponents}`);
  
  const successRate = Math.round((successCount / totalComponents) * 100);
  console.log(`üìä Taux de r√©ussite: ${successRate}%`);

  if (successRate === 100) {
    console.log('\nüéâ EXCELLENT! Analyse comparative compl√®te');
    console.log('‚úÖ Cartes Dashboard et Parcelles analys√©es');
    console.log('‚úÖ Fonctionnalit√©s compar√©es');
    console.log('‚úÖ Recommandations fournies');
  } else if (successRate >= 75) {
    console.log('\n‚ö†Ô∏è BON! La plupart des analyses sont r√©ussies');
  } else {
    console.log('\n‚ùå ATTENTION! Plusieurs analyses n√©cessitent une attention');
  }

  console.log('\nüîç CONCLUSION:');
  console.log('   - Dashboard: Carte int√©gr√©e avec donn√©es r√©elles et contr√¥les');
  console.log('   - Parcelles: Carte pure avec props et fonctionnalit√©s avanc√©es');
  console.log('   - Les deux utilisent React Leaflet et sont coh√©rentes');
  console.log('   - Le Dashboard est plus complet avec statistiques et navigation');
}

analyzeDashboardVsPlotsMap();
