#!/usr/bin/env node

/**
 * Script de v√©rification des photos d'observations
 * V√©rifie la coh√©rence entre observations et m√©dias
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Couleurs pour la console
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Charger les variables d'environnement
function loadEnv() {
  const envPath = path.join(process.cwd(), '.env');
  const envContent = fs.readFileSync(envPath, 'utf8');
  const envVars = {};
  
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=');
    if (key && valueParts.length > 0) {
      envVars[key.trim()] = valueParts.join('=').trim();
    }
  });

  return envVars;
}

// Initialiser le client Supabase
function initSupabase() {
  const env = loadEnv();
  const supabaseUrl = env.SUPABASE_URL;
  const supabaseKey = env.SUPABASE_ROLE_KEY || env.SUPABASE_SERVICE_ROLE_KEY;
  return createClient(supabaseUrl, supabaseKey);
}

// V√©rifier les photos d'observations
async function checkObservationPhotos() {
  log('\nüîç V√©rification Photos d\'Observations', 'cyan');
  log('='.repeat(60), 'cyan');

  const supabase = initSupabase();

  try {
    // 1. R√©cup√©rer toutes les observations r√©centes
    log('\nüìã R√©cup√©ration des observations r√©centes...', 'blue');
    
    const { data: observations, error: obsError } = await supabase
      .from('observations')
      .select('id, observation_type, description, observation_date, plot_id')
      .order('observation_date', { ascending: false })
      .limit(10);

    if (obsError) {
      log(`‚ùå Erreur r√©cup√©ration observations: ${obsError.message}`, 'red');
      return false;
    }

    if (!observations || observations.length === 0) {
      log('‚ùå Aucune observation trouv√©e', 'red');
      return false;
    }

    log(`‚úÖ ${observations.length} observations trouv√©es`, 'green');

    // 2. V√©rifier les m√©dias pour chaque observation
    log('\nüì∏ V√©rification des m√©dias par observation...', 'blue');
    
    for (const obs of observations) {
      log(`\nüîç Observation: ${obs.observation_type} (${obs.id})`, 'blue');
      log(`   Description: ${obs.description}`, 'blue');
      log(`   Date: ${obs.observation_date}`, 'blue');
      
      // R√©cup√©rer les m√©dias pour cette observation
      const { data: media, error: mediaError } = await supabase
        .from('media')
        .select('*')
        .eq('entity_type', 'observation')
        .eq('entity_id', obs.id);

      if (mediaError) {
        log(`   ‚ùå Erreur r√©cup√©ration m√©dias: ${mediaError.message}`, 'red');
        continue;
      }

      if (media && media.length > 0) {
        log(`   ‚úÖ ${media.length} photo(s) trouv√©e(s):`, 'green');
        media.forEach((m, index) => {
          log(`      ${index + 1}. ${m.file_name} (${m.file_path})`, 'green');
        });
      } else {
        log(`   ‚ö†Ô∏è  Aucune photo trouv√©e`, 'yellow');
      }
    }

    // 3. V√©rifier les m√©dias orphelins (sans observation correspondante)
    log('\nüîç V√©rification des m√©dias orphelins...', 'blue');
    
    const { data: allMedia, error: allMediaError } = await supabase
      .from('media')
      .select('*')
      .eq('entity_type', 'observation')
      .order('created_at', { ascending: false })
      .limit(20);

    if (allMediaError) {
      log(`‚ùå Erreur r√©cup√©ration m√©dias: ${allMediaError.message}`, 'red');
      return false;
    }

    if (allMedia && allMedia.length > 0) {
      log(`‚úÖ ${allMedia.length} m√©dias d'observations trouv√©s`, 'green');
      
      for (const media of allMedia) {
        // V√©rifier si l'observation existe
        const { data: obsExists, error: obsExistsError } = await supabase
          .from('observations')
          .select('id')
          .eq('id', media.entity_id)
          .single();

        if (obsExistsError || !obsExists) {
          log(`   ‚ö†Ô∏è  M√©dia orphelin: ${media.file_name} (obs: ${media.entity_id})`, 'yellow');
        } else {
          log(`   ‚úÖ M√©dia valide: ${media.file_name} (obs: ${media.entity_id})`, 'green');
        }
      }
    } else {
      log('‚ö†Ô∏è  Aucun m√©dia d\'observation trouv√©', 'yellow');
    }

    // 4. V√©rifier sp√©cifiquement l'observation r√©cente mentionn√©e dans les logs
    log('\nüéØ V√©rification observation sp√©cifique...', 'blue');
    
    const specificObsId = 'b4747995-cae5-4e5c-8429-b67291464e12';
    log(`   Recherche observation: ${specificObsId}`, 'blue');
    
    const { data: specificObs, error: specificObsError } = await supabase
      .from('observations')
      .select('*')
      .eq('id', specificObsId)
      .single();

    if (specificObsError || !specificObs) {
      log(`   ‚ùå Observation non trouv√©e: ${specificObsError?.message}`, 'red');
    } else {
      log(`   ‚úÖ Observation trouv√©e: ${specificObs.observation_type} - ${specificObs.description}`, 'green');
      
      // V√©rifier ses m√©dias
      const { data: specificMedia, error: specificMediaError } = await supabase
        .from('media')
        .select('*')
        .eq('entity_type', 'observation')
        .eq('entity_id', specificObsId);

      if (specificMediaError) {
        log(`   ‚ùå Erreur r√©cup√©ration m√©dias: ${specificMediaError.message}`, 'red');
      } else if (specificMedia && specificMedia.length > 0) {
        log(`   ‚úÖ ${specificMedia.length} photo(s) trouv√©e(s) pour cette observation:`, 'green');
        specificMedia.forEach((m, index) => {
          log(`      ${index + 1}. ${m.file_name}`, 'green');
          log(`         Chemin: ${m.file_path}`, 'green');
          log(`         Cr√©√©: ${m.created_at}`, 'green');
        });
      } else {
        log(`   ‚ö†Ô∏è  Aucune photo trouv√©e pour cette observation`, 'yellow');
      }
    }

    return true;

  } catch (error) {
    log(`‚ùå Erreur g√©n√©rale: ${error.message}`, 'red');
    return false;
  }
}

// Fonction principale
async function main() {
  log('üöÄ AgriConnect - V√©rification Photos Observations', 'bright');
  log('='.repeat(60), 'bright');

  const success = await checkObservationPhotos();

  log('\n' + '='.repeat(60), 'bright');
  
  if (success) {
    log('üéâ V√©rification termin√©e!', 'green');
    process.exit(0);
  } else {
    log('‚ùå Erreurs d√©tect√©es.', 'red');
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(error => {
    log(`‚ùå Erreur fatale: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = { checkObservationPhotos };
