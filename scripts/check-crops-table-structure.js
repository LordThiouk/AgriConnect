const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ROLE_KEY);

async function checkCropsTableStructure() {
  console.log('üîç V√©rification de la structure de la table crops...');
  
  try {
    // R√©cup√©rer quelques cultures pour voir la structure
    const { data: crops, error } = await supabase
      .from('crops')
      .select('*')
      .limit(3);

    if (error) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des cultures:', error);
      return;
    }

    console.log('üìã Structure de la table crops:');
    if (crops && crops.length > 0) {
      console.log('Colonnes disponibles:', Object.keys(crops[0]));
      console.log('Exemple de culture:', JSON.stringify(crops[0], null, 2));
    } else {
      console.log('Aucune culture trouv√©e');
    }

    // V√©rifier les relations avec les parcelles
    console.log('\nüîó V√©rification des relations crops-plots...');
    const { data: cropsWithPlots, error: error2 } = await supabase
      .from('crops')
      .select(`
        id,
        plot_id,
        crop_type,
        variety,
        created_at,
        plots!inner(
          id,
          name_season_snapshot
        )
      `)
      .limit(2);

    if (error2) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des cultures avec parcelles:', error2);
    } else {
      console.log('‚úÖ Relations crops-plots fonctionnent');
      console.log('Exemple avec parcelle:', JSON.stringify(cropsWithPlots[0], null, 2));
    }
    
    const { count, error: countError } = await supabase
      .from('crops')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.error('‚ùå Erreur lors du comptage des cultures:', countError);
    } else {
      console.log(`üìä Total des cultures: ${count}`);
    }

  } catch (err) {
    console.error('‚ùå Erreur g√©n√©rale:', err.message);
  }
}

checkCropsTableStructure();
