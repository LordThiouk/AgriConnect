const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

// Utiliser la SERVICE_ROLE_KEY pour bypasser RLS
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function checkProducerLinks() {
  console.log('üîç D√©marrage du diagnostic des liens producteur-fiche...');

  // 1. R√©cup√©rer toutes les fiches
  const { data: farmFiles, error: farmFilesError } = await supabase
    .from('farm_files')
    .select('id, name, responsible_producer_id, material_inventory');

  if (farmFilesError) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des fiches:', farmFilesError.message);
    return;
  }

  if (!farmFiles || farmFiles.length === 0) {
    console.log('‚úÖ Aucune fiche trouv√©e. La base de donn√©es est vide.');
    return;
  }

  console.log(`üìä Total de fiches trouv√©es: ${farmFiles.length}`);

  // 2. Identifier les fiches "orphelines"
  const orphanedFiles = farmFiles.filter(ff => !ff.responsible_producer_id);

  if (orphanedFiles.length === 0) {
    console.log('‚úÖ Toutes les fiches sont correctement associ√©es √† un producteur.');
    return;
  }

  console.log(`\nüö® ${orphanedFiles.length} fiches "orphelines" trouv√©es (sans producteur associ√©).`);

  // 3. Analyser les fiches orphelines pour voir si elles sont r√©parables
  let repairableCount = 0;
  let unrepairableCount = 0;

  console.log('\n--- Analyse des fiches orphelines ---');
  for (const file of orphanedFiles) {
    const producerData = file.material_inventory?.producerData;
    if (producerData && producerData.firstName && producerData.lastName) {
      console.log(`  - Fiche ID ${file.id} ("${file.name}"): ‚úÖ R√©parable (contient les donn√©es du producteur)`);
      repairableCount++;
    } else {
      console.log(`  - Fiche ID ${file.id} ("${file.name}"): ‚ùå Non r√©parable (donn√©es producteur manquantes)`);
      unrepairableCount++;
    }
  }

  // 4. Afficher le r√©sum√© final
  console.log('\n--- R√©sum√© du Diagnostic ---');
  console.log(`Total de fiches: ${farmFiles.length}`);
  console.log(`Fiches orphelines: ${orphanedFiles.length}`);
  console.log(`  - ‚úÖ R√©parables: ${repairableCount}`);
  console.log(`  - ‚ùå Non r√©parables: ${unrepairableCount}`);
  console.log('\nDiagnostic termin√©.');
}

checkProducerLinks().catch(console.error);
