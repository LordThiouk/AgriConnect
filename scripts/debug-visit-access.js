/**
 * Diagnostiquer l'acc√®s aux visites
 */

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugVisitAccess() {
  console.log('üîç Diagnostic de l\'acc√®s aux visites\n');
  console.log('‚ïê'.repeat(80));
  
  // R√©cup√©rer une visite
  const { data: visits } = await supabase
    .from('visits')
    .select('id, producer_id, plot_id, agent_id')
    .limit(1);
  
  if (!visits || visits.length === 0) {
    console.log('‚ùå Aucune visite trouv√©e');
    return;
  }
  
  const visit = visits[0];
  console.log(`\nüìã Visite: ${visit.id}`);
  console.log(`   Producer: ${visit.producer_id}`);
  console.log(`   Plot: ${visit.plot_id}`);
  console.log(`   Agent: ${visit.agent_id}`);
  
  // V√©rifier les assignations pour ce producteur
  console.log(`\nüîç V√©rification des assignations pour le producteur ${visit.producer_id}:`);
  
  const { data: assignments } = await supabase
    .from('agent_assignments')
    .select('agent_id, assigned_to_id, assigned_to_type')
    .eq('assigned_to_id', visit.producer_id)
    .eq('assigned_to_type', 'producer');
  
  if (assignments && assignments.length > 0) {
    console.log(`   ‚úÖ ${assignments.length} assignation(s) trouv√©e(s):`);
    assignments.forEach((assignment, index) => {
      console.log(`      ${index + 1}. Agent: ${assignment.agent_id}`);
    });
  } else {
    console.log(`   ‚ùå Aucune assignation trouv√©e pour ce producteur`);
  }
  
  // V√©rifier le profil de l'agent de la visite
  console.log(`\nüîç V√©rification du profil de l'agent ${visit.agent_id}:`);
  
  const { data: agentProfile } = await supabase
    .from('profiles')
    .select('user_id, role, display_name')
    .eq('user_id', visit.agent_id);
  
  if (agentProfile && agentProfile.length > 0) {
    console.log(`   ‚úÖ Profil agent trouv√©:`);
    console.log(`      User ID: ${agentProfile[0].user_id}`);
    console.log(`      R√¥le: ${agentProfile[0].role}`);
    console.log(`      Nom: ${agentProfile[0].display_name}`);
  } else {
    console.log(`   ‚ùå Profil agent non trouv√©`);
  }
  
  // V√©rifier si l'agent est assign√© au producteur
  console.log(`\nüîç V√©rification si l'agent ${visit.agent_id} est assign√© au producteur ${visit.producer_id}:`);
  
  const { data: agentAssignment } = await supabase
    .from('agent_assignments')
    .select('agent_id, assigned_to_id, assigned_to_type')
    .eq('agent_id', visit.agent_id)
    .eq('assigned_to_id', visit.producer_id)
    .eq('assigned_to_type', 'producer');
  
  if (agentAssignment && agentAssignment.length > 0) {
    console.log(`   ‚úÖ L'agent est assign√© au producteur`);
  } else {
    console.log(`   ‚ùå L'agent N'EST PAS assign√© au producteur`);
  }
  
  // Tester avec l'agent de la visite
  console.log(`\nüß™ Test du RPC avec l'agent de la visite (${visit.agent_id}):`);
  
  const { data: rpcData, error: rpcError } = await supabase
    .rpc('get_visit_for_edit', { p_visit_id: visit.id });
  
  if (rpcError) {
    console.log(`   ‚ùå Erreur RPC: ${rpcError.code} - ${rpcError.message}`);
  } else {
    console.log(`   ‚úÖ RPC r√©ussi !`);
    console.log(`   Producer: ${rpcData.producer?.first_name} ${rpcData.producer?.last_name}`);
    console.log(`   Plot: ${rpcData.plot?.name}`);
  }
  
  console.log('\n' + '‚ïê'.repeat(80));
  console.log('\n‚úÖ Diagnostic termin√©\n');
}

debugVisitAccess().catch(console.error);
