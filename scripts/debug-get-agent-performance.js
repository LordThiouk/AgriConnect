const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ROLE_KEY
);

async function debugGetAgentPerformance() {
  console.log('üîç D√©bogage de get_agent_performance...\n');

  try {
    // 1. R√©cup√©rer un agent
    console.log('1Ô∏è‚É£ R√©cup√©ration d\'un agent...');
    const { data: agents, error: agentsError } = await supabase
      .from('profiles')
      .select('*')
      .eq('role', 'agent')
      .limit(1);

    if (agentsError) throw agentsError;
    if (!agents || agents.length === 0) {
      console.log('‚ùå Aucun agent trouv√©');
      return;
    }

    const agent = agents[0];
    console.log(`‚úÖ Agent: ${agent.display_name} (${agent.id})`);

    // 2. Tester avec p_agent_id (param√®tre sugg√©r√© par l'erreur)
    console.log('\n2Ô∏è‚É£ Test avec p_agent_id...');
    const { data: result1, error: error1 } = await supabase
      .rpc('get_agent_performance', { 
        p_agent_id: agent.id 
      });

    if (error1) {
      console.log('‚ùå Erreur avec p_agent_id:', error1.message);
    } else {
      console.log('‚úÖ Succ√®s avec p_agent_id:', result1);
    }

    // 3. Tester avec agent_id_param (param√®tre utilis√© par le service)
    console.log('\n3Ô∏è‚É£ Test avec agent_id_param...');
    const { data: result2, error: error2 } = await supabase
      .rpc('get_agent_performance', { 
        agent_id_param: agent.id 
      });

    if (error2) {
      console.log('‚ùå Erreur avec agent_id_param:', error2.message);
    } else {
      console.log('‚úÖ Succ√®s avec agent_id_param:', result2);
    }

    // 4. Tester avec agent_id (ancien param√®tre)
    console.log('\n4Ô∏è‚É£ Test avec agent_id...');
    const { data: result3, error: error3 } = await supabase
      .rpc('get_agent_performance', { 
        agent_id: agent.id 
      });

    if (error3) {
      console.log('‚ùå Erreur avec agent_id:', error3.message);
    } else {
      console.log('‚úÖ Succ√®s avec agent_id:', result3);
    }

    // 5. Si aucune fonction ne fonctionne, cr√©er une fonction simple
    if (error1 && error2 && error3) {
      console.log('\n5Ô∏è‚É£ Aucune fonction ne fonctionne, cr√©ation d\'une fonction simple...');
      
      // Note: On ne peut pas cr√©er de fonction via RPC, il faut une migration
      console.log('‚ö†Ô∏è  Une migration est n√©cessaire pour cr√©er la fonction');
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

debugGetAgentPerformance();
