#!/usr/bin/env node

/**
 * Script pour d√©ployer la migration auth_logs sur Supabase
 * Utilise l'API Supabase pour ex√©cuter la migration SQL
 */

const fs = require('fs');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

// Configuration
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Variables d\'environnement manquantes:');
  console.error('   SUPABASE_URL:', SUPABASE_URL ? '‚úÖ' : '‚ùå');
  console.error('   SUPABASE_SERVICE_ROLE_KEY:', SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

// Cr√©er le client Supabase avec la cl√© service role
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function deployMigration() {
  try {
    console.log('üöÄ D√©ploiement de la migration auth_logs...');
    
    // Lire le fichier de migration
    const migrationPath = path.join(__dirname, '..', 'supabase', 'migrations', '20250830020002_create_auth_logs_table.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ Migration SQL charg√©e:', migrationPath);
    console.log('üìä Taille du fichier:', migrationSQL.length, 'caract√®res');
    
    // Ex√©cuter la migration via l'API Supabase
    console.log('‚ö° Ex√©cution de la migration...');
    
    const { data, error } = await supabase.rpc('exec_sql', {
      sql: migrationSQL
    });
    
    if (error) {
      console.error('‚ùå Erreur lors de l\'ex√©cution de la migration:');
      console.error(error);
      process.exit(1);
    }
    
    console.log('‚úÖ Migration d√©ploy√©e avec succ√®s!');
    console.log('üìã R√©sultat:', data);
    
    // V√©rifier que la table a √©t√© cr√©√©e
    console.log('üîç V√©rification de la cr√©ation de la table...');
    
    const { data: tables, error: tableError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'auth_logs');
    
    if (tableError) {
      console.error('‚ùå Erreur lors de la v√©rification:', tableError);
    } else if (tables && tables.length > 0) {
      console.log('‚úÖ Table auth_logs cr√©√©e avec succ√®s!');
    } else {
      console.log('‚ö†Ô∏è  Table auth_logs non trouv√©e dans le sch√©ma public');
    }
    
    // V√©rifier les fonctions cr√©√©es
    console.log('üîç V√©rification des fonctions cr√©√©es...');
    
    const { data: functions, error: funcError } = await supabase
      .from('information_schema.routines')
      .select('routine_name')
      .eq('routine_schema', 'public')
      .in('routine_name', ['log_auth_event', 'get_auth_log_stats', 'cleanup_old_auth_logs']);
    
    if (funcError) {
      console.error('‚ùå Erreur lors de la v√©rification des fonctions:', funcError);
    } else if (functions && functions.length > 0) {
      console.log('‚úÖ Fonctions cr√©√©es:', functions.map(f => f.routine_name).join(', '));
    } else {
      console.log('‚ö†Ô∏è  Aucune fonction trouv√©e');
    }
    
    console.log('üéâ D√©ploiement termin√© avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur fatale lors du d√©ploiement:');
    console.error(error);
    process.exit(1);
  }
}

// Fonction alternative utilisant l'API REST directe
async function deployMigrationDirect() {
  try {
    console.log('üöÄ D√©ploiement direct de la migration auth_logs...');
    
    // Lire le fichier de migration
    const migrationPath = path.join(__dirname, '..', 'supabase', 'migrations', '20250830020002_create_auth_logs_table.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ Migration SQL charg√©e:', migrationPath);
    
    // Diviser le SQL en instructions individuelles
    const statements = migrationSQL
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
    
    console.log('üìä Nombre d\'instructions SQL:', statements.length);
    
    // Ex√©cuter chaque instruction via l'API REST
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      console.log(`‚ö° Ex√©cution de l'instruction ${i + 1}/${statements.length}...`);
      
      try {
        const { data, error } = await supabase
          .from('_sql')
          .select('*')
          .eq('query', statement);
        
        if (error) {
          console.error(`‚ùå Erreur dans l'instruction ${i + 1}:`, error);
          // Continuer avec les autres instructions
        } else {
          console.log(`‚úÖ Instruction ${i + 1} ex√©cut√©e avec succ√®s`);
        }
      } catch (err) {
        console.error(`‚ùå Erreur fatale dans l'instruction ${i + 1}:`, err);
        // Continuer avec les autres instructions
      }
    }
    
    console.log('üéâ D√©ploiement termin√©!');
    
  } catch (error) {
    console.error('‚ùå Erreur fatale lors du d√©ploiement direct:');
    console.error(error);
    process.exit(1);
  }
}

// Fonction pour afficher les instructions manuelles
function showManualInstructions() {
  console.log('\nüìã INSTRUCTIONS MANUELLES POUR D√âPLOYER LA MIGRATION:');
  console.log('='.repeat(60));
  console.log('1. Ouvrez le Dashboard Supabase:');
  console.log('   https://supabase.com/dashboard/project/swggnqbymblnyjcocqxi');
  console.log('');
  console.log('2. Allez dans "SQL Editor" (dans le menu de gauche)');
  console.log('');
  console.log('3. Copiez et collez le contenu du fichier:');
  console.log('   supabase/migrations/20250830020002_create_auth_logs_table.sql');
  console.log('');
  console.log('4. Cliquez sur "Run" pour ex√©cuter la migration');
  console.log('');
  console.log('5. V√©rifiez que la table "auth_logs" a √©t√© cr√©√©e dans "Table Editor"');
  console.log('');
  console.log('6. V√©rifiez que les fonctions ont √©t√© cr√©√©es dans "Database Functions"');
  console.log('   - log_auth_event');
  console.log('   - get_auth_log_stats');
  console.log('   - cleanup_old_auth_logs');
  console.log('');
  console.log('‚úÖ Migration termin√©e!');
}

// Ex√©cuter le script
if (require.main === module) {
  console.log('üîß Script de d√©ploiement de migration AgriConnect');
  console.log('='.repeat(50));
  
  // Essayer d'abord la m√©thode RPC
  deployMigration().catch(() => {
    console.log('\n‚ö†Ô∏è  M√©thode RPC √©chou√©e, essai de la m√©thode directe...');
    return deployMigrationDirect();
  }).catch(() => {
    console.log('\n‚ö†Ô∏è  D√©ploiement automatique √©chou√©, affichage des instructions manuelles...');
    showManualInstructions();
  });
}

module.exports = { deployMigration, deployMigrationDirect, showManualInstructions };
