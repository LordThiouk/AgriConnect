const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ROLE_KEY
);

async function checkCooperativesSchema() {
  console.log('üîç V√©rification du sch√©ma de la table cooperatives...\n');

  try {
    // R√©cup√©rer la structure de la table cooperatives
    console.log('1Ô∏è‚É£ Structure de la table cooperatives...');
    const { data: cooperatives, error: cooperativesError } = await supabase
      .from('cooperatives')
      .select('*')
      .limit(1);

    if (cooperativesError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des cooperatives:', cooperativesError.message);
      return;
    }

    if (cooperatives && cooperatives.length > 0) {
      console.log('‚úÖ Colonnes de la table cooperatives:');
      Object.keys(cooperatives[0]).forEach(col => {
        console.log(`   - ${col}: ${typeof cooperatives[0][col]}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Aucune donn√©e dans la table cooperatives');
    }

    // R√©cup√©rer toutes les coop√©ratives
    console.log('\n2Ô∏è‚É£ Toutes les coop√©ratives...');
    const { data: allCoops, error: allCoopsError } = await supabase
      .from('cooperatives')
      .select('*');

    if (allCoopsError) {
      console.log('‚ùå Erreur:', allCoopsError.message);
    } else {
      console.log(`‚úÖ ${allCoops.length} coop√©ratives trouv√©es:`);
      allCoops.forEach((coop, index) => {
        console.log(`   ${index + 1}. ${coop.name} (${coop.region || 'Pas de r√©gion'}) - ID: ${coop.id}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

checkCooperativesSchema();