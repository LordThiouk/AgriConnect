/**
 * Script pour v√©rifier la structure de la table recommendations
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkRecommendationsTable() {
  try {
    console.log('üîç V√©rification de la table recommendations...\n');

    // R√©cup√©rer un √©chantillon pour voir la structure
    const { data: sampleRec, error: sampleError } = await supabase
      .from('recommendations')
      .select('*')
      .limit(1);

    if (sampleError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration d\'un √©chantillon:', sampleError);
      return;
    }

    if (sampleRec && sampleRec.length > 0) {
      console.log('üìã Structure de la table recommendations (via √©chantillon):');
      Object.keys(sampleRec[0]).forEach(key => {
        const value = sampleRec[0][key];
        const type = typeof value;
        console.log(`   - ${key}: ${type} ${value === null ? '(NULL)' : ''}`);
      });
    } else {
      console.log('   Aucune donn√©e trouv√©e dans la table recommendations');
    }

    // Compter le nombre total
    const { count: totalRecs, error: countError } = await supabase
      .from('recommendations')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.error('‚ùå Erreur lors du comptage:', countError);
    } else {
      console.log(`\nüìä Total des recommandations: ${totalRecs}`);
    }

    console.log('\n‚úÖ V√©rification termin√©e!');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le script
checkRecommendationsTable();
