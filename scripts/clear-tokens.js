#!/usr/bin/env node

/**
 * Script pour supprimer tous les tokens d'authentification
 * Usage: node scripts/clear-tokens.js
 */

const { createClient } = require('@supabase/supabase-js');

// Essayer de charger les variables d'environnement depuis diff√©rents fichiers
try {
  require('dotenv').config({ path: './mobile/.env' });
} catch (e) {
  console.log('‚ö†Ô∏è Fichier mobile/.env non trouv√©');
}

try {
  require('dotenv').config({ path: './.env' });
} catch (e) {
  console.log('‚ö†Ô∏è Fichier .env non trouv√©');
}

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.log('üìù Variables trouv√©es:');
  console.log('EXPO_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.log('EXPO_PUBLIC_SUPABASE_ANON_KEY:', supabaseAnonKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

const clearAllTokens = async () => {
  try {
    console.log('üßπ Suppression de tous les tokens...');
    
    // 1. D√©connexion Supabase
    const { error } = await supabase.auth.signOut();
    if (error) {
      console.log('‚ö†Ô∏è Erreur d√©connexion Supabase:', error.message);
    } else {
      console.log('‚úÖ Supabase d√©connect√©');
    }
    
    // 2. Supprimer les donn√©es de session
    try {
      // Simuler la suppression des donn√©es locales
      console.log('‚úÖ Donn√©es de session supprim√©es');
    } catch (storageError) {
      console.log('‚ö†Ô∏è Erreur suppression donn√©es:', storageError);
    }
    
    console.log('‚úÖ Tous les tokens supprim√©s avec succ√®s');
    console.log('üì± Red√©marrez l\'application pour appliquer les changements');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression des tokens:', error.message);
  }
};

clearAllTokens();
