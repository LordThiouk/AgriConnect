const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ROLE_KEY);

async function debugMobileAuth() {
  console.log('üîç Debug de l\'authentification mobile...');
  
  try {
    // R√©cup√©rer tous les utilisateurs avec leurs profils
    console.log('\n1Ô∏è‚É£ Liste de tous les utilisateurs avec leurs profils...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select(`
        id,
        user_id,
        display_name,
        role,
        phone,
        created_at
      `)
      .order('created_at', { ascending: false });
    
    if (profilesError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des profils:', profilesError);
      return;
    }
    
    console.log('üìã Profils trouv√©s:', profiles.length);
    profiles.forEach((profile, index) => {
      console.log(`\n${index + 1}. ${profile.display_name || 'Sans nom'}`);
      console.log(`   - ID: ${profile.id}`);
      console.log(`   - User ID: ${profile.user_id}`);
      console.log(`   - R√¥le: ${profile.role}`);
      console.log(`   - T√©l√©phone: ${profile.phone || 'Non renseign√©'}`);
      console.log(`   - Cr√©√© le: ${profile.created_at}`);
    });
    
    // Identifier les agents
    const agents = profiles.filter(p => p.role === 'agent');
    console.log(`\nüë• Agents trouv√©s: ${agents.length}`);
    
    // Tester les parcelles pour chaque agent
    console.log('\n2Ô∏è‚É£ Test des parcelles pour chaque agent...');
    for (const agent of agents) {
      console.log(`\nüß™ Test pour ${agent.display_name || 'Sans nom'} (${agent.user_id})...`);
      
      const { data: plots, error: rpcError } = await supabase
        .rpc('get_agent_plots_with_geolocation', {
          p_agent_user_id: agent.user_id
        });

      if (rpcError) {
        console.log(`‚ùå Erreur RPC pour ${agent.display_name}:`, rpcError.message);
        continue;
      }

      console.log(`‚úÖ Parcelles trouv√©es pour ${agent.display_name}:`, plots?.length || 0);
      
      if (plots && plots.length > 0) {
        console.log(`   Exemple: ${plots[0].name_season_snapshot} (${plots[0].producer_name})`);
      }
    }
    
    // V√©rifier les utilisateurs r√©cents (ceux qui pourraient √™tre connect√©s dans l'app)
    console.log('\n3Ô∏è‚É£ Utilisateurs r√©cents (potentiellement connect√©s)...');
    const recentProfiles = profiles
      .filter(p => p.created_at > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()) // 7 derniers jours
      .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
    
    console.log('üìÖ Profils cr√©√©s dans les 7 derniers jours:', recentProfiles.length);
    recentProfiles.forEach((profile, index) => {
      console.log(`\n${index + 1}. ${profile.display_name || 'Sans nom'}`);
      console.log(`   - User ID: ${profile.user_id}`);
      console.log(`   - R√¥le: ${profile.role}`);
      console.log(`   - Cr√©√© le: ${profile.created_at}`);
    });
    
    // Suggestions pour l'utilisateur
    console.log('\n4Ô∏è‚É£ Suggestions pour r√©soudre le probl√®me...');
    console.log('üîç V√©rifiez dans l\'app mobile:');
    console.log('   1. Quel user_id est affich√© dans les logs ?');
    console.log('   2. Quel r√¥le est affich√© (userRole) ?');
    console.log('   3. L\'utilisateur est-il bien connect√© ?');
    console.log('\nüí° Si l\'utilisateur n\'est pas un agent, il faut:');
    console.log('   - Soit changer son r√¥le en "agent"');
    console.log('   - Soit se connecter avec un compte agent');
    console.log('\nüí° Si l\'agent n\'a pas de parcelles, il faut:');
    console.log('   - V√©rifier ses assignations dans agent_assignments');
    console.log('   - V√©rifier que les producteurs assign√©s ont des parcelles');
    
  } catch (err) {
    console.error('‚ùå Erreur g√©n√©rale:', err.message);
  }
}

debugMobileAuth();
