const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function repairProducerLinks() {
  console.log('üõ†Ô∏è D√©marrage du script de r√©paration...');

  // 1. R√©cup√©rer les fiches orphelines
  const { data: orphanedFiles, error: fetchError } = await supabase
    .from('farm_files')
    .select('id, name, cooperative_id, material_inventory')
    .is('responsible_producer_id', null);

  if (fetchError) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des fiches orphelines:', fetchError.message);
    return;
  }

  if (!orphanedFiles || orphanedFiles.length === 0) {
    console.log('‚úÖ Aucune fiche orpheline √† r√©parer.');
    return;
  }

  console.log(`üîç ${orphanedFiles.length} fiches orphelines trouv√©es.`);

  let repairedCount = 0;
  let skippedCount = 0;

  // 2. Parcourir chaque fiche et la r√©parer
  for (const file of orphanedFiles) {
    const producerData = file.material_inventory?.producerData;

    if (producerData && producerData.firstName && producerData.lastName) {
      try {
        console.log(`  - Traitement de la fiche ID ${file.id} ("${file.name}")...`);

        // Valider et formater la date de naissance
        let birthDate = producerData.birthDate || null;
        if (birthDate && !/^\d{4}-\d{2}-\d{2}$/.test(birthDate)) {
          console.warn(`    ‚ö†Ô∏è Date de naissance invalide ("${birthDate}") pour la fiche ${file.id}. Sera mise √† NULL.`);
          birthDate = null;
        }
        
        // Fournir un t√©l√©phone par d√©faut si manquant
        let phone = producerData.phone;
        if (!phone) {
          // G√©n√®re un num√©ro pseudo-al√©atoire unique pour satisfaire la contrainte
          phone = `0000${Math.floor(100000 + Math.random() * 900000)}`;
          console.warn(`    ‚ö†Ô∏è Num√©ro de t√©l√©phone manquant pour la fiche ${file.id}. Utilisation d'une valeur unique g√©n√©r√©e : ${phone}.`);
        }

        const { data: newProducer, error: producerError } = await supabase
          .from('producers')
          .insert({
            first_name: producerData.firstName,
            last_name: producerData.lastName,
            birth_date: birthDate,
            gender: producerData.sex || null,
            cooperative_id: file.cooperative_id,
            phone: phone, // Ajout du t√©l√©phone
          })
          .select('id')
          .single();

        if (producerError) {
          throw new Error(`Erreur cr√©ation producteur: ${producerError.message}`);
        }

        // 4. Mettre √† jour la fiche avec le nouvel ID du producteur
        const { error: updateError } = await supabase
          .from('farm_files')
          .update({ responsible_producer_id: newProducer.id })
          .eq('id', file.id);

        if (updateError) {
          throw new Error(`Erreur mise √† jour fiche: ${updateError.message}`);
        }

        console.log(`    ‚úÖ Fiche r√©par√©e. Producteur ${newProducer.id} associ√©.`);
        repairedCount++;
      } catch (e) {
        console.error(`    ‚ùå Erreur lors du traitement de la fiche ${file.id}: ${e.message}`);
      }
    } else {
      skippedCount++;
    }
  }

  // 5. Afficher le r√©sum√© final
  console.log('\n--- R√©sum√© de la R√©paration ---');
  console.log(`Total de fiches orphelines trait√©es: ${orphanedFiles.length}`);
  console.log(`  - ‚úÖ Fiches r√©par√©es: ${repairedCount}`);
  console.log(`  - ‚è© Fiches ignor√©es (non r√©parables): ${skippedCount}`);
  console.log('\nR√©paration termin√©e.');
}

repairProducerLinks().catch(console.error);
