const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function analyzeAlertsSystem() {
  console.log('üîç Analyse du syst√®me d\'alertes AgriConnect');
  console.log('='.repeat(60));

  try {
    const agentUserId = 'b00a283f-0a46-41d2-af95-8a256c9c2771';
    
    // 1. V√©rifier la structure de la table recommendations
    console.log('\n1. üìã Structure de la table recommendations:');
    console.log('‚îÄ'.repeat(30));
    
    const { data: recommendations, error: recError } = await supabase
      .from('recommendations')
      .select('*')
      .limit(3);

    if (recError) {
      console.error('‚ùå Erreur r√©cup√©ration recommendations:', recError);
    } else {
      console.log(`‚úÖ ${recommendations?.length || 0} recommandations trouv√©es`);
      if (recommendations && recommendations.length > 0) {
        console.log('\nüìã Structure de la table:');
        const sample = recommendations[0];
        Object.keys(sample).forEach(key => {
          const value = sample[key];
          const type = typeof value;
          console.log(`   ${key.padEnd(20)}: ${type} = ${value || 'N/A'}`);
        });
      }
    }

    // 2. V√©rifier la structure de la table observations
    console.log('\n2. üìä Structure de la table observations:');
    console.log('‚îÄ'.repeat(30));
    
    const { data: observations, error: obsError } = await supabase
      .from('observations')
      .select('*')
      .limit(3);

    if (obsError) {
      console.error('‚ùå Erreur r√©cup√©ration observations:', obsError);
    } else {
      console.log(`‚úÖ ${observations?.length || 0} observations trouv√©es`);
      if (observations && observations.length > 0) {
        console.log('\nüìã Structure de la table:');
        const sample = observations[0];
        Object.keys(sample).forEach(key => {
          const value = sample[key];
          const type = typeof value;
          console.log(`   ${key.padEnd(20)}: ${type} = ${value || 'N/A'}`);
        });
      }
    }

    // 3. Tester le RPC get_agent_terrain_alerts
    console.log('\n3. üö® Test du RPC get_agent_terrain_alerts:');
    console.log('‚îÄ'.repeat(30));
    
    const { data: alerts, error: alertsError } = await supabase
      .rpc('get_agent_terrain_alerts', {
        p_user_id: agentUserId
      });

    if (alertsError) {
      console.error('‚ùå Erreur RPC get_agent_terrain_alerts:', alertsError);
    } else {
      console.log(`‚úÖ RPC r√©ussi: ${alerts?.length || 0} alertes trouv√©es`);
      
      if (alerts && alerts.length > 0) {
        console.log('\nüìã D√©tails des alertes:');
        alerts.forEach((alert, index) => {
          console.log(`\n${index + 1}. Alerte:`);
          console.log(`   ID: ${alert.id}`);
          console.log(`   Titre: ${alert.title}`);
          console.log(`   Description: ${alert.description}`);
          console.log(`   S√©v√©rit√©: ${alert.severity}`);
          console.log(`   Parcelle: ${alert.plotName || 'N/A'}`);
          console.log(`   Producteur: ${alert.producerName || 'N/A'}`);
          console.log(`   Date: ${alert.createdAt}`);
        });
      } else {
        console.log('‚ÑπÔ∏è Aucune alerte trouv√©e pour cet agent');
      }
    }

    // 4. Analyser les observations avec haute s√©v√©rit√©
    console.log('\n4. üîç Analyse des observations avec haute s√©v√©rit√©:');
    console.log('‚îÄ'.repeat(30));
    
    const { data: highSeverityObs, error: highSeverityError } = await supabase
      .from('observations')
      .select(`
        id,
        observation_type,
        description,
        severity,
        created_at,
        plots!inner(
          id,
          name_season_snapshot,
          producers!inner(
            id,
            first_name,
            last_name
          )
        )
      `)
      .gte('severity', 3)
      .order('severity', { ascending: false })
      .order('created_at', { ascending: false })
      .limit(5);

    if (highSeverityError) {
      console.error('‚ùå Erreur r√©cup√©ration observations haute s√©v√©rit√©:', highSeverityError);
    } else {
      console.log(`‚úÖ ${highSeverityObs?.length || 0} observations haute s√©v√©rit√© trouv√©es`);
      
      if (highSeverityObs && highSeverityObs.length > 0) {
        console.log('\nüìã Observations haute s√©v√©rit√©:');
        highSeverityObs.forEach((obs, index) => {
          console.log(`\n${index + 1}. Observation:`);
          console.log(`   ID: ${obs.id}`);
          console.log(`   Type: ${obs.observation_type}`);
          console.log(`   Description: ${obs.description}`);
          console.log(`   S√©v√©rit√©: ${obs.severity}`);
          console.log(`   Parcelle: ${obs.plots?.name_season_snapshot || 'N/A'}`);
          console.log(`   Producteur: ${obs.plots?.producers?.first_name} ${obs.plots?.producers?.last_name}`);
          console.log(`   Date: ${obs.created_at}`);
        });
      }
    }

    // 5. V√©rifier les r√®gles agricoles
    console.log('\n5. üìú V√©rification des r√®gles agricoles:');
    console.log('‚îÄ'.repeat(30));
    
    const { data: rules, error: rulesError } = await supabase
      .from('agri_rules')
      .select('*')
      .limit(5);

    if (rulesError) {
      console.error('‚ùå Erreur r√©cup√©ration r√®gles:', rulesError);
    } else {
      console.log(`‚úÖ ${rules?.length || 0} r√®gles agricoles trouv√©es`);
      
      if (rules && rules.length > 0) {
        console.log('\nüìã R√®gles agricoles:');
        rules.forEach((rule, index) => {
          console.log(`\n${index + 1}. R√®gle:`);
          console.log(`   Code: ${rule.code}`);
          console.log(`   Nom: ${rule.name}`);
          console.log(`   Type: ${rule.rule_type}`);
          console.log(`   Condition: ${rule.condition}`);
          console.log(`   Action: ${rule.action}`);
          console.log(`   Priorit√©: ${rule.priority}`);
        });
      }
    }

    // 6. Tester la g√©n√©ration d'alertes
    console.log('\n6. ‚öôÔ∏è Test de g√©n√©ration d\'alertes:');
    console.log('‚îÄ'.repeat(30));
    
    // V√©rifier s'il y a des Edge Functions pour la g√©n√©ration d'alertes
    const { data: functions, error: functionsError } = await supabase
      .from('supabase_functions.functions')
      .select('name, status')
      .like('name', '%alert%');

    if (functionsError) {
      console.log('‚ÑπÔ∏è Impossible de v√©rifier les Edge Functions (normal en mode local)');
    } else {
      console.log(`‚úÖ ${functions?.length || 0} fonctions li√©es aux alertes trouv√©es`);
      functions?.forEach(func => {
        console.log(`   - ${func.name}: ${func.status}`);
      });
    }

    // 7. R√©sum√© du syst√®me d'alertes
    console.log('\n7. üìä R√©sum√© du syst√®me d\'alertes:');
    console.log('‚îÄ'.repeat(30));
    
    console.log('üîç Sources d\'alertes identifi√©es:');
    console.log('   1. üìä Observations (table observations)');
    console.log('      - S√©v√©rit√© >= 3 g√©n√®re des alertes');
    console.log('      - Types: ravageur, maladie, lev√©e');
    console.log('      - Via RPC get_agent_terrain_alerts');
    
    console.log('\n   2. üìú Recommandations (table recommendations)');
    console.log('      - G√©n√©r√©es par les r√®gles agricoles');
    console.log('      - Statut "active" pour affichage');
    console.log('      - Via RPC unifi√© get_agent_dashboard_unified');
    
    console.log('\n   3. üéØ R√®gles agricoles (table agri_rules)');
    console.log('      - D√©finissent les conditions d\'alerte');
    console.log('      - G√©n√®rent des recommandations automatiques');
    console.log('      - Ex√©cut√©es via Edge Functions ou triggers');

    console.log('\nüéØ Flux d\'alertes:');
    console.log('   1. Agent fait une observation ‚Üí table observations');
    console.log('   2. Si s√©v√©rit√© >= 3 ‚Üí alerte via get_agent_terrain_alerts');
    console.log('   3. R√®gles agricoles analysent les donn√©es ‚Üí table recommendations');
    console.log('   4. Dashboard affiche les alertes actives');
    console.log('   5. Agent peut marquer comme "fait" ou "dismissed"');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

analyzeAlertsSystem();
