#!/usr/bin/env node

/**
 * Script de Debug - R√¥le Utilisateur
 * Diagnostique le probl√®me d'acc√®s web
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes:');
  console.error('   SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.error('   SUPABASE_ANON_KEY:', supabaseAnonKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function debugUserRole() {
  console.log('üîç Diagnostic du r√¥le utilisateur...\n');

  try {
    // 1. V√©rifier l'√©tat d'authentification
    console.log('1Ô∏è‚É£ V√©rification de l\'authentification...');
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.error('‚ùå Erreur d\'authentification:', authError.message);
      return;
    }

    if (!user) {
      console.log('‚ö†Ô∏è  Aucun utilisateur connect√©');
      console.log('   Connectez-vous d\'abord via l\'interface web');
      return;
    }

    console.log('‚úÖ Utilisateur connect√©:', user.email || user.phone);
    console.log('   ID:', user.id);
    console.log('   Cr√©√© le:', new Date(user.created_at).toLocaleString());

    // 2. V√©rifier les m√©tadonn√©es utilisateur
    console.log('\n2Ô∏è‚É£ V√©rification des m√©tadonn√©es utilisateur...');
    console.log('   user_metadata:', JSON.stringify(user.user_metadata, null, 2));
    
    const userRole = user.user_metadata?.role;
    console.log('   R√¥le dans user_metadata:', userRole || '‚ùå Non d√©fini');

    // 3. V√©rifier le profil dans la table profiles
    console.log('\n3Ô∏è‚É£ V√©rification du profil dans la base de donn√©es...');
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', user.id)
      .single();

    if (profileError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du profil:', profileError.message);
    } else if (profile) {
      console.log('‚úÖ Profil trouv√©:');
      console.log('   R√¥le dans profiles.role:', profile.role || '‚ùå Non d√©fini');
      console.log('   Display name:', profile.display_name || '‚ùå Non d√©fini');
      console.log('   R√©gion:', profile.region || '‚ùå Non d√©finie');
      console.log('   Coop√©rative:', profile.cooperative || '‚ùå Non d√©finie');
    } else {
      console.log('‚ö†Ô∏è  Aucun profil trouv√© pour cet utilisateur');
    }

    // 4. V√©rifier les r√¥les autoris√©s pour le web
    console.log('\n4Ô∏è‚É£ V√©rification des permissions web...');
    const webAllowedRoles = ['admin', 'supervisor', 'coop_admin'];
    const mobileOnlyRoles = ['agent', 'producer'];
    
    console.log('   R√¥les autoris√©s pour le web:', webAllowedRoles.join(', '));
    console.log('   R√¥les mobile uniquement:', mobileOnlyRoles.join(', '));
    
    const effectiveRole = profile?.role || userRole;
    console.log('   R√¥le effectif:', effectiveRole || '‚ùå Non d√©fini');
    
    if (effectiveRole) {
      const isWebAllowed = webAllowedRoles.includes(effectiveRole);
      const isMobileOnly = mobileOnlyRoles.includes(effectiveRole);
      
      console.log('   Acc√®s web autoris√©:', isWebAllowed ? '‚úÖ' : '‚ùå');
      console.log('   Acc√®s mobile uniquement:', isMobileOnly ? '‚úÖ' : '‚ùå');
      
      if (!isWebAllowed && !isMobileOnly) {
        console.log('   ‚ö†Ô∏è  R√¥le non reconnu!');
      }
    }

    // 5. Suggestions de correction
    console.log('\n5Ô∏è‚É£ Suggestions de correction...');
    
    if (!effectiveRole) {
      console.log('üîß Probl√®me: Aucun r√¥le d√©fini');
      console.log('   Solution: Mettre √† jour le profil avec un r√¥le valide');
      console.log('   Exemple SQL:');
      console.log(`   UPDATE profiles SET role = 'admin' WHERE user_id = '${user.id}';`);
    } else if (mobileOnlyRoles.includes(effectiveRole)) {
      console.log('üîß Probl√®me: R√¥le mobile uniquement');
      console.log('   Solution: Changer le r√¥le pour autoriser l\'acc√®s web');
      console.log('   R√¥les web autoris√©s: admin, supervisor, coop_admin');
      console.log('   Exemple SQL:');
      console.log(`   UPDATE profiles SET role = 'admin' WHERE user_id = '${user.id}';`);
    }

    // 6. Test des fonctions de validation
    console.log('\n6Ô∏è‚É£ Test des fonctions de validation...');
    
    if (effectiveRole) {
      const { data: validationResult, error: validationError } = await supabase
        .rpc('validate_user_role', { role_text: effectiveRole });
      
      if (validationError) {
        console.error('‚ùå Erreur validation r√¥le:', validationError.message);
      } else {
        console.log('   Validation r√¥le:', validationResult ? '‚úÖ Valide' : '‚ùå Invalide');
      }

      const { data: platformResult, error: platformError } = await supabase
        .rpc('can_access_platform', { user_role: effectiveRole, platform: 'web' });
      
      if (platformError) {
        console.error('‚ùå Erreur v√©rification plateforme:', platformError.message);
      } else {
        console.log('   Acc√®s web autoris√© (DB):', platformResult ? '‚úÖ' : '‚ùå');
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.message);
  }
}

// Ex√©cuter le diagnostic
debugUserRole();
