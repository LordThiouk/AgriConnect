/**
 * Interceptors par d√©faut pour l'API Client AgriConnect
 * Gestion d'erreurs, authentification, et logging
 */

import { ApiInterceptor, ApiRequest, ApiResponse, ApiError } from '../lib/types/core';

/**
 * Interceptor pour la gestion des erreurs Supabase
 */
export const supabaseErrorInterceptor: ApiInterceptor = {
  error: (error: ApiError): ApiError => {
    // Gestion sp√©cifique des erreurs Supabase
    if (error.code === 'PGRST116') {
      return {
        ...error,
        message: 'Aucun r√©sultat trouv√©',
        code: 'NOT_FOUND',
      };
    }
    
    if (error.code === 'PGRST202') {
      return {
        ...error,
        message: 'Fonction RPC non trouv√©e',
        code: 'RPC_NOT_FOUND',
      };
    }

    if (error.code === '42P01') {
      return {
        ...error,
        message: 'Table ou vue non trouv√©e',
        code: 'TABLE_NOT_FOUND',
      };
    }

    if (error.code === '23503') {
      return {
        ...error,
        message: 'Violation de contrainte de cl√© √©trang√®re',
        code: 'FOREIGN_KEY_VIOLATION',
      };
    }

    // Gestion des erreurs de r√©seau
    if (error.message.includes('Network request failed')) {
      return {
        ...error,
        message: 'Erreur de connexion r√©seau',
        code: 'NETWORK_ERROR',
      };
    }

    // Gestion des timeouts
    if (error.message.includes('timeout') || error.message.includes('TIMEOUT')) {
      return {
        ...error,
        message: 'D√©lai d\'attente d√©pass√©',
        code: 'TIMEOUT',
      };
    }

    return error;
  },
};

/**
 * Interceptor pour l'authentification
 */
export const authInterceptor: ApiInterceptor = {
  request: async (request: ApiRequest): Promise<ApiRequest> => {
    // V√©rifier si l'utilisateur est authentifi√©
    // Cette logique sera impl√©ment√©e avec le contexte d'authentification
    
    // Ajouter les headers d'authentification si n√©cessaire
    const headers = {
      ...request.headers,
      'Content-Type': 'application/json',
    };

    return {
      ...request,
      headers,
    };
  },

  error: (error: ApiError): ApiError => {
    // Gestion des erreurs d'authentification
    if (error.status === 401) {
      return {
        ...error,
        message: 'Session expir√©e. Veuillez vous reconnecter.',
        code: 'AUTH_EXPIRED',
      };
    }

    if (error.status === 403) {
      return {
        ...error,
        message: 'Acc√®s non autoris√©',
        code: 'FORBIDDEN',
      };
    }

    return error;
  },
};

/**
 * Interceptor pour le logging des performances
 */
export const performanceInterceptor: ApiInterceptor = {
  request: (request: ApiRequest): ApiRequest => {
    // Marquer le d√©but de la requ√™te pour le calcul du temps de r√©ponse
    return {
      ...request,
      _startTime: Date.now(),
    } as any;
  },

  response: <T>(response: ApiResponse<T>): ApiResponse<T> => {
    // Log des performances si en mode debug
    if (__DEV__) {
      const responseTime = response.responseTime;
      const status = response.status;
      
      if (responseTime > 1000) {
        console.warn(`‚ö†Ô∏è [API] Requ√™te lente d√©tect√©e: ${responseTime}ms`);
      }
      
      if (status >= 400) {
        console.error(`‚ùå [API] Erreur ${status}: ${responseTime}ms`);
      } else {
        console.log(`‚úÖ [API] Succ√®s ${status}: ${responseTime}ms`);
      }
    }

    return response;
  },

  error: (error: ApiError): ApiError => {
    // Log des erreurs
    if (__DEV__) {
      console.error(`‚ùå [API] Erreur:`, {
        code: error.code,
        message: error.message,
        status: error.status,
        timestamp: error.timestamp,
      });
    }

    return error;
  },
};

/**
 * Interceptor pour la validation des r√©ponses
 */
export const validationInterceptor: ApiInterceptor = {
  response: <T>(response: ApiResponse<T>): ApiResponse<T> => {
    // Validation basique des r√©ponses
    if (response.status >= 400) {
      console.warn(`‚ö†Ô∏è [API] R√©ponse avec erreur: ${response.status}`);
    }

    // V√©rifier la structure des donn√©es
    if (response.data && typeof response.data === 'object') {
      // Validation basique - peut √™tre √©tendue avec Zod
      if (Array.isArray(response.data)) {
        console.log(`üìä [API] R√©ponse avec ${response.data.length} √©l√©ments`);
      }
    }

    return response;
  },
};

/**
 * Interceptor pour la gestion du cache
 */
export const cacheInterceptor: ApiInterceptor = {
  request: (request: ApiRequest): ApiRequest => {
    // D√©finir le cache par d√©faut selon le type de requ√™te
    if (request.cache === undefined) {
      if (request.method === 'GET' || request.url.includes('rpc:')) {
        request.cache = 'medium'; // 5 minutes par d√©faut
      } else {
        request.cache = false; // Pas de cache pour POST/PUT/DELETE
      }
    }

    return request;
  },

  response: <T>(response: ApiResponse<T>): ApiResponse<T> => {
    // Invalider le cache si n√©cessaire apr√®s certaines op√©rations
    if (response.status >= 200 && response.status < 300) {
      // Les op√©rations de modification peuvent n√©cessiter l'invalidation
      // Cette logique sera impl√©ment√©e selon les besoins sp√©cifiques
    }

    return response;
  },
};

/**
 * Interceptor pour la gestion offline
 */
export const offlineInterceptor: ApiInterceptor = {
  request: (request: ApiRequest): ApiRequest => {
    // V√©rifier la connectivit√© r√©seau
    // Cette logique sera impl√©ment√©e avec NetInfo
    
    return request;
  },

  error: (error: ApiError): ApiError => {
    // Gestion des erreurs offline
    if (error.message.includes('Network request failed') || 
        error.message.includes('No internet connection')) {
      return {
        ...error,
        message: 'Pas de connexion internet. Les donn√©es seront synchronis√©es quand la connexion sera r√©tablie.',
        code: 'OFFLINE',
      };
    }

    return error;
  },
};

/**
 * Configuration des interceptors par d√©faut
 */
export const defaultInterceptors: ApiInterceptor[] = [
  authInterceptor,
  supabaseErrorInterceptor,
  cacheInterceptor,
  performanceInterceptor,
  validationInterceptor,
  offlineInterceptor,
];

/**
 * Fonction utilitaire pour cr√©er un interceptor personnalis√©
 */
export const createInterceptor = (config: Partial<ApiInterceptor>): ApiInterceptor => {
  return {
    request: config.request,
    response: config.response,
    error: config.error,
  };
};
