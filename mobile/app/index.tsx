/**
 * Point d'entr√©e principal de l'application mobile - AgriConnect
 * G√®re la redirection vers la page de login ou l'application selon l'√©tat d'authentification
 */

import React, { useEffect } from 'react';
import { View, ActivityIndicator, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
import { useAuth } from '../context/AuthContext';
import { Ionicons } from '@expo/vector-icons';
import type { UserRole } from '../../types/user';

export default function IndexScreen() {
  const router = useRouter();
  const { isAuthenticated, isLoading, canAccessMobile, userRole } = useAuth();

  // Fonction pour d√©terminer la route de redirection bas√©e sur le r√¥le
  // L'app mobile est uniquement pour producteurs et agents
  const getRedirectRoute = (role: UserRole | null) => {
    switch (role) {
      case 'producer':
        return '/(tabs)/producer-dashboard' as any;
      case 'agent':
        return '/(tabs)/test-redirect' as any; // Test temporaire
      default:
        return '/(tabs)/test-redirect' as any; // Test temporaire
    }
  };

  useEffect(() => {
    console.log('üîÑ [NAVIGATION] useEffect d√©clench√© avec:', {
      isLoading,
      isAuthenticated,
      canAccessMobile,
      userRole
    });
    
    if (!isLoading) {
      if (isAuthenticated && canAccessMobile) {
        // Utilisateur authentifi√© et autoris√© pour mobile
        const redirectRoute = getRedirectRoute(userRole);
        console.log('üîÑ [NAVIGATION] Redirection vers:', redirectRoute, 'pour le r√¥le:', userRole);
        
        // Ajouter un petit d√©lai pour s'assurer que l'√©tat est bien propag√©
        setTimeout(() => {
          console.log('üöÄ [NAVIGATION] Ex√©cution de la redirection...');
          router.replace(redirectRoute);
        }, 100);
      } else if (isAuthenticated && !canAccessMobile) {
        // Utilisateur authentifi√© mais pas autoris√© pour mobile
        if (!userRole) {
          // Pas de r√¥le = pas de profil, rediriger vers s√©lection de r√¥le
          console.log('üë§ [NAVIGATION] Pas de r√¥le, redirection vers s√©lection de r√¥le...');
          router.replace('/(auth)/role-selection');
        } else {
          // R√¥le non autoris√© pour mobile
          console.log('‚ùå [NAVIGATION] Utilisateur non autoris√© pour mobile, r√¥le:', userRole);
          router.replace('/(auth)/login');
        }
      } else {
        // Utilisateur non authentifi√©
        console.log('üîê [NAVIGATION] Utilisateur non authentifi√©, redirection vers login');
        router.replace('/(auth)/login');
      }
    } else {
      console.log('‚è≥ [NAVIGATION] Chargement en cours, attente...');
    }
  }, [isAuthenticated, isLoading, canAccessMobile, userRole, router]);

  // Affichage de chargement pendant la v√©rification de l'authentification
  return (
    <View style={styles.container}>
      <View style={styles.loadingContent}>
        <Ionicons name="leaf" size={80} color="#3D944B" />
        <ActivityIndicator 
          size="large" 
          color="#3D944B" 
          style={styles.spinner}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F6F6F6',
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingContent: {
    alignItems: 'center',
  },
  spinner: {
    marginTop: 20,
  },
});
