/**
 * Script pour v√©rifier le vrai sch√©ma de la base de donn√©es
 */

require('dotenv').config({ path: '../../.env' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkRealSchema() {
  console.log('üîç === V√âRIFICATION DU VRAI SCH√âMA ===\n');
  
  try {
    // 1. V√©rifier la table profiles avec toutes les colonnes
    console.log('üìã Table profiles (toutes les colonnes):');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (profilesError) {
      console.error('‚ùå Erreur profiles:', profilesError);
    } else if (profiles && profiles.length > 0) {
      console.log('‚úÖ Colonnes disponibles:');
      Object.keys(profiles[0]).forEach(col => {
        console.log(`   - ${col}: ${typeof profiles[0][col]}`);
      });
    } else {
      console.log('‚ùå Aucun profil trouv√©');
    }
    
    // 2. V√©rifier la table plots
    console.log('\nüèûÔ∏è Table plots (toutes les colonnes):');
    const { data: plots, error: plotsError } = await supabase
      .from('plots')
      .select('*')
      .limit(1);
    
    if (plotsError) {
      console.error('‚ùå Erreur plots:', plotsError);
    } else if (plots && plots.length > 0) {
      console.log('‚úÖ Colonnes disponibles:');
      Object.keys(plots[0]).forEach(col => {
        console.log(`   - ${col}: ${typeof plots[0][col]}`);
      });
    } else {
      console.log('‚ùå Aucune parcelle trouv√©e');
    }
    
    // 3. V√©rifier la table agent_assignments
    console.log('\nüë• Table agent_assignments (toutes les colonnes):');
    const { data: assignments, error: assignmentsError } = await supabase
      .from('agent_assignments')
      .select('*')
      .limit(1);
    
    if (assignmentsError) {
      console.error('‚ùå Erreur agent_assignments:', assignmentsError);
    } else if (assignments && assignments.length > 0) {
      console.log('‚úÖ Colonnes disponibles:');
      Object.keys(assignments[0]).forEach(col => {
        console.log(`   - ${col}: ${typeof assignments[0][col]}`);
      });
    } else {
      console.log('‚ùå Aucune assignation trouv√©e');
    }
    
    // 4. V√©rifier les RPC qui fonctionnent
    console.log('\nüîß === TEST DES RPC QUI FONCTIONNENT ===');
    
    // Test get_agent_assignments
    console.log('üìä Test get_agent_assignments:');
    const { data: testAssignments, error: testError } = await supabase
      .rpc('get_agent_assignments', {
        p_agent_id: '0f33842a-a1f1-4ad5-8113-39285e5013df'
      });
    
    if (testError) {
      console.error('‚ùå Erreur get_agent_assignments:', testError);
    } else {
      console.log(`‚úÖ get_agent_assignments fonctionne: ${testAssignments?.length || 0} r√©sultats`);
      if (testAssignments && testAssignments.length > 0) {
        console.log('   Colonnes retourn√©es:');
        Object.keys(testAssignments[0]).forEach(col => {
          console.log(`   - ${col}: ${typeof testAssignments[0][col]}`);
        });
      }
    }
    
    // 5. V√©rifier les agents dans profiles
    console.log('\nüë§ Agents dans profiles:');
    const { data: agents, error: agentsError } = await supabase
      .from('profiles')
      .select('*')
      .eq('role', 'agent')
      .limit(5);
    
    if (agentsError) {
      console.error('‚ùå Erreur agents:', agentsError);
    } else {
      console.log(`‚úÖ ${agents?.length || 0} agents trouv√©s`);
      if (agents && agents.length > 0) {
        agents.forEach((agent, index) => {
          console.log(`   ${index + 1}. ID: ${agent.id}`);
          console.log(`      Colonnes: ${Object.keys(agent).join(', ')}`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

checkRealSchema();
