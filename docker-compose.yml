version: '3.8'

services:
  # Service Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - agriconnect-network

  # Service Backend (pour le futur)
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=${DATABASE_URL}
  #     - JWT_SECRET=${JWT_SECRET}
  #   depends_on:
  #     - database
  #   restart: unless-stopped
  #   networks:
  #     - agriconnect-network

  # Base de donn√©es PostgreSQL (pour le futur)
  # database:
  #   image: postgres:15-alpine
  #   environment:
  #     - POSTGRES_DB=agriconnect
  #     - POSTGRES_USER=${DB_USER}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   networks:
  #     - agriconnect-network

  # Redis pour le cache (pour le futur)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   restart: unless-stopped
  #   networks:
  #     - agriconnect-network

  # Nginx reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
    restart: unless-stopped
    networks:
      - agriconnect-network

networks:
  agriconnect-network:
    driver: bridge

volumes:
  postgres_data: 